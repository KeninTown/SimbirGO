// Code generated by MockGen. DO NOT EDIT.
// Source: authUsecase.go

// Package mock_authUsecase is a generated GoMock package.
package mock_authUsecase

import (
	reflect "reflect"
	models "simbirGo/internal/database/models"

	gomock "github.com/golang/mock/gomock"
)

// MockAuthRepository is a mock of AuthRepository interface.
type MockAuthRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAuthRepositoryMockRecorder
}

// MockAuthRepositoryMockRecorder is the mock recorder for MockAuthRepository.
type MockAuthRepositoryMockRecorder struct {
	mock *MockAuthRepository
}

// NewMockAuthRepository creates a new mock instance.
func NewMockAuthRepository(ctrl *gomock.Controller) *MockAuthRepository {
	mock := &MockAuthRepository{ctrl: ctrl}
	mock.recorder = &MockAuthRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthRepository) EXPECT() *MockAuthRepositoryMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockAuthRepository) CreateUser(user models.User) models.User {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", user)
	ret0, _ := ret[0].(models.User)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockAuthRepositoryMockRecorder) CreateUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockAuthRepository)(nil).CreateUser), user)
}

// DeleteUser mocks base method.
func (m *MockAuthRepository) DeleteUser(id uint) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteUser", id)
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockAuthRepositoryMockRecorder) DeleteUser(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockAuthRepository)(nil).DeleteUser), id)
}

// FindUserById mocks base method.
func (m *MockAuthRepository) FindUserById(id uint) models.User {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserById", id)
	ret0, _ := ret[0].(models.User)
	return ret0
}

// FindUserById indicates an expected call of FindUserById.
func (mr *MockAuthRepositoryMockRecorder) FindUserById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserById", reflect.TypeOf((*MockAuthRepository)(nil).FindUserById), id)
}

// FindUserByUsername mocks base method.
func (m *MockAuthRepository) FindUserByUsername(username string) models.User {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserByUsername", username)
	ret0, _ := ret[0].(models.User)
	return ret0
}

// FindUserByUsername indicates an expected call of FindUserByUsername.
func (mr *MockAuthRepositoryMockRecorder) FindUserByUsername(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserByUsername", reflect.TypeOf((*MockAuthRepository)(nil).FindUserByUsername), username)
}

// GetUsers mocks base method.
func (m *MockAuthRepository) GetUsers(start uint, count int) []models.User {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsers", start, count)
	ret0, _ := ret[0].([]models.User)
	return ret0
}

// GetUsers indicates an expected call of GetUsers.
func (mr *MockAuthRepositoryMockRecorder) GetUsers(start, count interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockAuthRepository)(nil).GetUsers), start, count)
}

// SaveUser mocks base method.
func (m *MockAuthRepository) SaveUser(user models.User) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SaveUser", user)
}

// SaveUser indicates an expected call of SaveUser.
func (mr *MockAuthRepositoryMockRecorder) SaveUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveUser", reflect.TypeOf((*MockAuthRepository)(nil).SaveUser), user)
}
