// Code generated by MockGen. DO NOT EDIT.
// Source: authHandler.go

// Package mock_authHandler is a generated GoMock package.
package mock_authHandler

import (
	reflect "reflect"
	entities "simbirGo/internal/entities"

	gomock "github.com/golang/mock/gomock"
)

// MockAuthUsecase is a mock of AuthUsecase interface.
type MockAuthUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockAuthUsecaseMockRecorder
}

// MockAuthUsecaseMockRecorder is the mock recorder for MockAuthUsecase.
type MockAuthUsecaseMockRecorder struct {
	mock *MockAuthUsecase
}

// NewMockAuthUsecase creates a new mock instance.
func NewMockAuthUsecase(ctrl *gomock.Controller) *MockAuthUsecase {
	mock := &MockAuthUsecase{ctrl: ctrl}
	mock.recorder = &MockAuthUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthUsecase) EXPECT() *MockAuthUsecaseMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockAuthUsecase) CreateUser(user entities.User) (entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", user)
	ret0, _ := ret[0].(entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockAuthUsecaseMockRecorder) CreateUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockAuthUsecase)(nil).CreateUser), user)
}

// DeleteUser mocks base method.
func (m *MockAuthUsecase) DeleteUser(id uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockAuthUsecaseMockRecorder) DeleteUser(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockAuthUsecase)(nil).DeleteUser), id)
}

// GetUsers mocks base method.
func (m *MockAuthUsecase) GetUsers(start, end uint) []entities.User {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsers", start, end)
	ret0, _ := ret[0].([]entities.User)
	return ret0
}

// GetUsers indicates an expected call of GetUsers.
func (mr *MockAuthUsecaseMockRecorder) GetUsers(start, end interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockAuthUsecase)(nil).GetUsers), start, end)
}

// MyAccount mocks base method.
func (m *MockAuthUsecase) MyAccount(id uint) (entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MyAccount", id)
	ret0, _ := ret[0].(entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MyAccount indicates an expected call of MyAccount.
func (mr *MockAuthUsecaseMockRecorder) MyAccount(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MyAccount", reflect.TypeOf((*MockAuthUsecase)(nil).MyAccount), id)
}

// SignIn mocks base method.
func (m *MockAuthUsecase) SignIn(user entities.User) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignIn", user)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignIn indicates an expected call of SignIn.
func (mr *MockAuthUsecaseMockRecorder) SignIn(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignIn", reflect.TypeOf((*MockAuthUsecase)(nil).SignIn), user)
}

// SignOut mocks base method.
func (m *MockAuthUsecase) SignOut(token string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SignOut", token)
}

// SignOut indicates an expected call of SignOut.
func (mr *MockAuthUsecaseMockRecorder) SignOut(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignOut", reflect.TypeOf((*MockAuthUsecase)(nil).SignOut), token)
}

// SignUp mocks base method.
func (m *MockAuthUsecase) SignUp(user entities.User) (entities.User, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignUp", user)
	ret0, _ := ret[0].(entities.User)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SignUp indicates an expected call of SignUp.
func (mr *MockAuthUsecaseMockRecorder) SignUp(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignUp", reflect.TypeOf((*MockAuthUsecase)(nil).SignUp), user)
}

// Update mocks base method.
func (m *MockAuthUsecase) Update(user entities.User) (entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", user)
	ret0, _ := ret[0].(entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockAuthUsecaseMockRecorder) Update(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockAuthUsecase)(nil).Update), user)
}

// UpdateUser mocks base method.
func (m *MockAuthUsecase) UpdateUser(user entities.User) (entities.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", user)
	ret0, _ := ret[0].(entities.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockAuthUsecaseMockRecorder) UpdateUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockAuthUsecase)(nil).UpdateUser), user)
}
