basePath: /
definitions:
  authHandler.CreateUser.userData:
    properties:
      balance:
        type: number
      isAdmin:
        type: boolean
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  authHandler.SignIn.userCreadentials:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  authHandler.SignUp.userData:
    properties:
      isAdmin:
        type: boolean
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  authHandler.Update.userData:
    properties:
      balance:
        type: number
      isAdmin:
        type: boolean
      password:
        type: string
      username:
        type: string
    required:
    - balance
    - isAdmin
    - password
    - username
    type: object
  authHandler.UpdateUser.userData:
    properties:
      balance:
        type: number
      isAdmin:
        type: boolean
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  entities.Transport:
    properties:
      canBeRented:
        type: boolean
      color:
        type: string
      dayPrice:
        type: number
      description:
        type: string
      id:
        type: integer
      identifier:
        type: string
      latitude:
        type: number
      longitude:
        type: number
      minutePrice:
        type: number
      model:
        type: string
      ownerId:
        type: integer
      transportType:
        type: string
    type: object
  entities.User:
    properties:
      balance:
        type: number
      id:
        type: integer
      isAdmin:
        type: boolean
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  httpUtil.ResponseError:
    properties:
      err:
        example: error occures
        type: string
    type: object
  transportHandler.AdminCreateTransport.transportData:
    properties:
      canBeRented:
        type: boolean
      color:
        type: string
      dayPrice:
        type: number
      description:
        type: string
      identifier:
        type: string
      latitude:
        type: number
      longitude:
        type: number
      minutePrice:
        type: number
      model:
        type: string
      ownerId:
        type: integer
      transportType:
        type: string
    required:
    - color
    - identifier
    - latitude
    - longitude
    - model
    - ownerId
    - transportType
    type: object
  transportHandler.AdminUpdateTransport.transportData:
    properties:
      canBeRented:
        type: boolean
      color:
        type: string
      dayPrice:
        type: number
      description:
        type: string
      identifier:
        type: string
      latitude:
        type: number
      longitude:
        type: number
      minutePrice:
        type: number
      model:
        type: string
      ownerId:
        type: integer
      transportType:
        type: string
    required:
    - color
    - identifier
    - latitude
    - longitude
    - model
    - ownerId
    - transportType
    type: object
  transportHandler.CreateTransport.responseData:
    properties:
      canBeRented:
        type: boolean
      color:
        type: string
      dayPrice:
        type: number
      description:
        type: string
      id:
        type: integer
      identifier:
        type: string
      latitude:
        type: number
      longitude:
        type: number
      minutePrice:
        type: number
      model:
        type: string
      transportType:
        type: string
    required:
    - color
    - identifier
    - latitude
    - longitude
    - model
    - transportType
    type: object
  transportHandler.CreateTransport.transportData:
    properties:
      canBeRented:
        type: boolean
      color:
        type: string
      dayPrice:
        type: number
      description:
        type: string
      identifier:
        type: string
      latitude:
        type: number
      longitude:
        type: number
      minutePrice:
        type: number
      model:
        type: string
      transportType:
        type: string
    required:
    - color
    - identifier
    - latitude
    - longitude
    - model
    - transportType
    type: object
  transportHandler.GetTransport.transportData:
    properties:
      canBeRented:
        type: boolean
      color:
        type: string
      dayPrice:
        type: number
      description:
        type: string
      identifier:
        type: string
      latitude:
        type: number
      longitude:
        type: number
      minutePrice:
        type: number
      model:
        type: string
      transportType:
        type: string
    required:
    - color
    - identifier
    - latitude
    - longitude
    - model
    - transportType
    type: object
  transportHandler.UpdateTransport.responseData:
    properties:
      canBeRented:
        type: boolean
      color:
        type: string
      dayPrice:
        type: number
      description:
        type: string
      id:
        type: integer
      identifier:
        type: string
      latitude:
        type: number
      longitude:
        type: number
      minutePrice:
        type: number
      model:
        type: string
      transportType:
        type: string
    required:
    - color
    - identifier
    - latitude
    - longitude
    - model
    - transportType
    type: object
  transportHandler.UpdateTransport.transportData:
    properties:
      canBeRented:
        type: boolean
      color:
        type: string
      dayPrice:
        type: number
      description:
        type: string
      identifier:
        type: string
      latitude:
        type: number
      longitude:
        type: number
      minutePrice:
        type: number
      model:
        type: string
      transportType:
        type: string
    required:
    - color
    - identifier
    - latitude
    - longitude
    - model
    - transportType
    type: object
host: localhost:80
info:
  contact:
    email: soldatovalex207z@gmail.com
    name: Alexander Soldatov
  description: Server for transport booking
  termsOfService: http://swagger.io/terms/
  title: SimbirGO REST API
  version: "1.0"
paths:
  /api/Account/Me:
    get:
      description: Просмотр информации о текущем авторизованном аккаунте
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entities.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httpUtil.ResponseError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/httpUtil.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Просмотр данных текущего аккаунта
      tags:
      - AccountController
  /api/Account/SignIn:
    post:
      consumes:
      - application/json
      description: Вход в аккаунт и установление в cookie jwt токена авторизации
      parameters:
      - description: User credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/authHandler.SignIn.userCreadentials'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httpUtil.ResponseError'
      summary: Вход в аккаунт
      tags:
      - AccountController
  /api/Account/SignOut:
    post:
      description: Удаление jwt токена из cookie access_token
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httpUtil.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Выход из аккаунта
      tags:
      - AccountController
  /api/Account/SignUp:
    post:
      consumes:
      - application/json
      description: Регистрация и установление jwt токена в cookie access_token
      parameters:
      - description: User data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/authHandler.SignUp.userData'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/entities.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httpUtil.ResponseError'
      summary: Регистрация
      tags:
      - AccountController
  /api/Account/Update:
    put:
      consumes:
      - application/json
      description: Проверка входящих данных и обновление данных аккаунта
      parameters:
      - description: User data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/authHandler.Update.userData'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entities.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httpUtil.ResponseError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/httpUtil.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Обновление данных аккаунта
      tags:
      - AccountController
  /api/Admin/Account:
    get:
      description: Получение данных count пользователей начиная с id = start
      parameters:
      - description: start
        in: query
        name: start
        required: true
        type: integer
      - description: count
        in: query
        name: count
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entities.User'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httpUtil.ResponseError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/httpUtil.ResponseError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/httpUtil.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Получение данных пользователей
      tags:
      - AdminAccountController
    post:
      consumes:
      - application/json
      description: Создание нового пользователя с указанными данными
      parameters:
      - description: User data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/authHandler.CreateUser.userData'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/entities.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httpUtil.ResponseError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/httpUtil.ResponseError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/httpUtil.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Создание нового пользователя
      tags:
      - AdminAccountController
  /api/Admin/Account/{id}:
    delete:
      description: Обновление данных пользователя с id={id}
      parameters:
      - description: Account id
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entities.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httpUtil.ResponseError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/httpUtil.ResponseError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/httpUtil.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Обновление данных пользователя
      tags:
      - AdminAccountController
    get:
      description: Получение пользователя с id = {id}
      parameters:
      - description: Account id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entities.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httpUtil.ResponseError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/httpUtil.ResponseError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/httpUtil.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Получение пользователя
      tags:
      - AdminAccountController
    put:
      consumes:
      - application/json
      description: Обновление данных пользователя с id={id}
      parameters:
      - description: Account id
        in: path
        name: id
        required: true
        type: integer
      - description: User data
        in: body
        name: requset
        required: true
        schema:
          $ref: '#/definitions/authHandler.UpdateUser.userData'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entities.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httpUtil.ResponseError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/httpUtil.ResponseError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/httpUtil.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Обновление данных пользователя
      tags:
      - AdminAccountController
  /api/Admin/Transport:
    get:
      description: Получение count транспортных средств с id >= start с типом транспорта
        transportType
      parameters:
      - description: start
        in: query
        name: start
        required: true
        type: integer
      - description: count
        in: query
        name: count
        required: true
        type: integer
      - description: transportType
        in: query
        name: count
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entities.Transport'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httpUtil.ResponseError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/httpUtil.ResponseError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/httpUtil.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Информация о транспортных средствах
      tags:
      - AdminTransportController
    post:
      consumes:
      - application/json
      description: Создание транспортного средства указывая пользователя с id = ownerId
      parameters:
      - description: Transport data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/transportHandler.AdminCreateTransport.transportData'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/entities.Transport'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httpUtil.ResponseError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/httpUtil.ResponseError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/httpUtil.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Создание транспортного средства
      tags:
      - AdminTransportController
  /api/Admin/Transport/{id}:
    delete:
      description: Удаление транспортного средства с id = {id}
      parameters:
      - description: Transport id
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httpUtil.ResponseError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/httpUtil.ResponseError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/httpUtil.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Удаление транспортного средства
      tags:
      - AdminTransportController
    get:
      description: Получение информации о транспортном средстве с id = {id}
      parameters:
      - description: Transport id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entities.Transport'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httpUtil.ResponseError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/httpUtil.ResponseError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/httpUtil.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Информация о транспортном средстве
      tags:
      - AdminTransportController
    put:
      consumes:
      - application/json
      description: Обновление транспортного средства с id = {id}
      parameters:
      - description: Transport id
        in: path
        name: id
        required: true
        type: integer
      - description: Transport data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/transportHandler.AdminUpdateTransport.transportData'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entities.Transport'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httpUtil.ResponseError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/httpUtil.ResponseError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/httpUtil.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Обновление транспортного средства
      tags:
      - AdminTransportController
  /api/Payment/Hesoyam/{id}:
    post:
      description: Добавляет на баланс пользователся с id = {id} 250 000. Администраторы
        могут изменять баланс любому пользователю, обычные пользователи только себе
      parameters:
      - description: Account id
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httpUtil.ResponseError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/httpUtil.ResponseError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/httpUtil.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Пополнение баланса
      tags:
      - PaymentController
  /api/Transport:
    post:
      consumes:
      - application/json
      description: Создает транспорт у текущего авторизованного пользователя
      parameters:
      - description: Transport data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/transportHandler.CreateTransport.transportData'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/transportHandler.CreateTransport.responseData'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httpUtil.ResponseError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/httpUtil.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Создаение транспорта
      tags:
      - TransportController
  /api/Transport/{id}:
    delete:
      description: Удаление транспорта с id = {id} если данные транспорт принадлежит
        текущему авторизованному пользователю
      parameters:
      - description: Transport id
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httpUtil.ResponseError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/httpUtil.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Удаление транспорта
      tags:
      - TransportController
    get:
      description: Просмотр информации о транспорте с id = {id}
      parameters:
      - description: Transport id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/transportHandler.GetTransport.transportData'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httpUtil.ResponseError'
      summary: Получение информации о транспотре
      tags:
      - TransportController
    put:
      consumes:
      - application/json
      description: Обновление информации о транспорте с id = {id}
      parameters:
      - description: Transport id
        in: path
        name: id
        required: true
        type: integer
      - description: Transport data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/transportHandler.UpdateTransport.transportData'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/transportHandler.UpdateTransport.responseData'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httpUtil.ResponseError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/httpUtil.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Обновление информации о транспотре
      tags:
      - TransportController
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
