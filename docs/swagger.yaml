basePath: /
definitions:
  authHandler.AdminCreateUser.userData:
    properties:
      balance:
        type: number
      isAdmin:
        type: boolean
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  authHandler.AdminUpdateUser.userData:
    properties:
      balance:
        type: number
      isAdmin:
        type: boolean
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  authHandler.UserSignIn.userCreadentials:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  authHandler.UserSignUp.userData:
    properties:
      isAdmin:
        type: boolean
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  authHandler.UserUpdate.userData:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  entities.Rent:
    properties:
      finalPrice:
        type: number
      id:
        type: integer
      priceOfUnit:
        type: number
      priceType:
        enum:
        - Minutes
        - ' Days'
        type: string
      timeEnd:
        type: string
      timeStart:
        type: string
      transportId:
        type: integer
      userId:
        type: integer
    type: object
  entities.Transport:
    properties:
      canBeRented:
        type: boolean
      color:
        type: string
      dayPrice:
        type: number
      description:
        type: string
      id:
        type: integer
      identifier:
        type: string
      latitude:
        type: number
      longitude:
        type: number
      minutePrice:
        type: number
      model:
        type: string
      ownerId:
        type: integer
      transportType:
        enum:
        - Car
        - ' Scooter'
        - ' Bike'
        type: string
    type: object
  entities.User:
    properties:
      balance:
        type: number
      id:
        type: integer
      isAdmin:
        type: boolean
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  httpUtil.ResponseError:
    properties:
      err:
        example: error occures
        type: string
    type: object
  rentHandler.AdminCreateRent.rentData:
    properties:
      priceOfUnit:
        type: number
      priceType:
        type: string
      timeEnd:
        type: string
      timeStart:
        type: string
      transportId:
        type: integer
      userId:
        type: integer
    required:
    - priceOfUnit
    - priceType
    - timeStart
    - transportId
    - userId
    type: object
  rentHandler.AdminUpdateRent.rentData:
    properties:
      priceOfUnit:
        type: number
      priceType:
        type: string
      timeEnd:
        type: string
      timeStart:
        type: string
      transportId:
        type: integer
      userId:
        type: integer
    required:
    - priceOfUnit
    - priceType
    - timeStart
    - transportId
    - userId
    type: object
  transportHandler.AdminCreateTransport.transportData:
    properties:
      canBeRented:
        type: boolean
      color:
        type: string
      dayPrice:
        type: number
      description:
        type: string
      identifier:
        type: string
      latitude:
        type: number
      longitude:
        type: number
      minutePrice:
        type: number
      model:
        type: string
      ownerId:
        type: integer
      transportType:
        type: string
    required:
    - color
    - identifier
    - model
    - ownerId
    - transportType
    type: object
  transportHandler.AdminUpdateTransport.transportData:
    properties:
      canBeRented:
        type: boolean
      color:
        type: string
      dayPrice:
        type: number
      description:
        type: string
      identifier:
        type: string
      latitude:
        type: number
      longitude:
        type: number
      minutePrice:
        type: number
      model:
        type: string
      ownerId:
        type: integer
      transportType:
        type: string
    required:
    - color
    - identifier
    - model
    - ownerId
    - transportType
    type: object
  transportHandler.UserCreateTransport.responseData:
    properties:
      canBeRented:
        type: boolean
      color:
        type: string
      dayPrice:
        type: number
      description:
        type: string
      id:
        type: integer
      identifier:
        type: string
      latitude:
        type: number
      longitude:
        type: number
      minutePrice:
        type: number
      model:
        type: string
      transportType:
        type: string
    required:
    - color
    - identifier
    - latitude
    - longitude
    - model
    - transportType
    type: object
  transportHandler.UserCreateTransport.transportData:
    properties:
      canBeRented:
        type: boolean
      color:
        type: string
      dayPrice:
        type: number
      description:
        type: string
      identifier:
        type: string
      latitude:
        type: number
      longitude:
        type: number
      minutePrice:
        type: number
      model:
        type: string
      transportType:
        type: string
    required:
    - color
    - identifier
    - latitude
    - longitude
    - model
    - transportType
    type: object
  transportHandler.UserGetTransport.transportData:
    properties:
      canBeRented:
        type: boolean
      color:
        type: string
      dayPrice:
        type: number
      description:
        type: string
      identifier:
        type: string
      latitude:
        type: number
      longitude:
        type: number
      minutePrice:
        type: number
      model:
        type: string
      transportType:
        type: string
    required:
    - color
    - identifier
    - latitude
    - longitude
    - model
    - transportType
    type: object
  transportHandler.UserUpdateTransport.responseData:
    properties:
      canBeRented:
        type: boolean
      color:
        type: string
      dayPrice:
        type: number
      description:
        type: string
      id:
        type: integer
      identifier:
        type: string
      latitude:
        type: number
      longitude:
        type: number
      minutePrice:
        type: number
      model:
        type: string
      transportType:
        type: string
    required:
    - color
    - identifier
    - latitude
    - longitude
    - model
    - transportType
    type: object
  transportHandler.UserUpdateTransport.transportData:
    properties:
      canBeRented:
        type: boolean
      color:
        type: string
      dayPrice:
        type: number
      description:
        type: string
      identifier:
        type: string
      latitude:
        type: number
      longitude:
        type: number
      minutePrice:
        type: number
      model:
        type: string
      transportType:
        type: string
    required:
    - color
    - identifier
    - latitude
    - longitude
    - model
    - transportType
    type: object
host: localhost:80
info:
  contact:
    email: soldatovalex207z@gmail.com
    name: Alexander Soldatov
  description: Server for transport booking
  termsOfService: http://swagger.io/terms/
  title: SimbirGO REST API
  version: "1.0"
paths:
  /api/Account/Me:
    get:
      description: Просмотр информации о текущем авторизованном аккаунте
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entities.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httpUtil.ResponseError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/httpUtil.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Просмотр данных текущего аккаунта
      tags:
      - AccountController
  /api/Account/SignIn:
    post:
      consumes:
      - application/json
      description: Вход в аккаунт пользователя с использованием имени пользователя
        - username и паролем - password и получение jwt
      parameters:
      - description: User credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/authHandler.UserSignIn.userCreadentials'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httpUtil.ResponseError'
      summary: Вход в аккаунт
      tags:
      - AccountController
  /api/Account/SignOut:
    post:
      description: Внесение текущего используемого токена доступа в черный список
        токенов
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httpUtil.ResponseError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/httpUtil.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Выход из аккаунта
      tags:
      - AccountController
  /api/Account/SignUp:
    post:
      consumes:
      - application/json
      description: Регистрация пользовате и получение jwt
      parameters:
      - description: User data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/authHandler.UserSignUp.userData'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/entities.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httpUtil.ResponseError'
      summary: Регистрация
      tags:
      - AccountController
  /api/Account/Update:
    put:
      consumes:
      - application/json
      description: |-
        Обновление данных аккаунта username и password.
        При смене одного из данных параметров требуется указать текущее значение другого параметра.
      parameters:
      - description: User data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/authHandler.UserUpdate.userData'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/authHandler.UserUpdate.userData'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httpUtil.ResponseError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/httpUtil.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Обновление данных аккаунта
      tags:
      - AccountController
  /api/Admin/Account:
    get:
      description: Возращает информацию о count аккаунтах пользователей начиная с
        id = start
      parameters:
      - description: start
        in: query
        name: start
        required: true
        type: integer
      - description: count
        in: query
        name: count
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entities.User'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httpUtil.ResponseError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/httpUtil.ResponseError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/httpUtil.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Получение данных пользователей
      tags:
      - AdminAccountController
    post:
      consumes:
      - application/json
      description: Создание нового пользователя с указанными данными
      parameters:
      - description: User data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/authHandler.AdminCreateUser.userData'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/entities.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httpUtil.ResponseError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/httpUtil.ResponseError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/httpUtil.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Создание нового пользователя
      tags:
      - AdminAccountController
  /api/Admin/Account/{id}:
    delete:
      description: Удаление данных пользователя с id={id}
      parameters:
      - description: Account id
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httpUtil.ResponseError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/httpUtil.ResponseError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/httpUtil.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Удаление пользователя
      tags:
      - AdminAccountController
    get:
      description: Возвращает информацию о пользователе с id = {id}
      parameters:
      - description: Account id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entities.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httpUtil.ResponseError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/httpUtil.ResponseError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/httpUtil.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Получение информации о пользователе
      tags:
      - AdminAccountController
    put:
      consumes:
      - application/json
      description: Обновление данных пользователя с id={id}
      parameters:
      - description: Account id
        in: path
        name: id
        required: true
        type: integer
      - description: User data
        in: body
        name: requset
        required: true
        schema:
          $ref: '#/definitions/authHandler.AdminUpdateUser.userData'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entities.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httpUtil.ResponseError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/httpUtil.ResponseError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/httpUtil.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Обновление данных пользователя
      tags:
      - AdminAccountController
  /api/Admin/Rent:
    post:
      consumes:
      - application/json
      description: Создание аренды транспорта с id = transportId пользователем с id
        = userId
      parameters:
      - description: Rent data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/rentHandler.AdminCreateRent.rentData'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/entities.Rent'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httpUtil.ResponseError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/httpUtil.ResponseError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/httpUtil.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Создание новой аренды
      tags:
      - AdminRentController
  /api/Admin/Rent/{rentId}:
    delete:
      description: Удаление аренды с id = {rentId}
      parameters:
      - description: Rent id
        in: path
        name: rentId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httpUtil.ResponseError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/httpUtil.ResponseError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/httpUtil.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Удаление аренды
      tags:
      - AdminRentController
    get:
      description: Получение информации об аренде с id = {rentId}
      parameters:
      - description: Rent id
        in: path
        name: rentId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entities.Rent'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httpUtil.ResponseError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/httpUtil.ResponseError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/httpUtil.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Информации об аренде
      tags:
      - AdminRentController
    put:
      consumes:
      - application/json
      description: |-
        Обновление информации об аренде с id = {rentId}
        Если в обновлении аренды указывается дата ее окончания, то аренда считается завершенной.
        Происходит рассчет итоговой суммы аренды и если она оказывается больше, чем сумма на счете пользователя, то обновить аренду нельзя.
      parameters:
      - description: Rent data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/rentHandler.AdminUpdateRent.rentData'
      - description: Rent id
        in: path
        name: rentId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/entities.Rent'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httpUtil.ResponseError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/httpUtil.ResponseError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/httpUtil.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Обновление аренды
      tags:
      - AdminRentController
  /api/Admin/Rent/End/{rentId}:
    post:
      description: |-
        Завершение аренды с id = {rentId}.
        Происходит рассчет итоговой суммы аренды и если она оказывается больше, чем сумма на счете пользователя, то в завершить аренду нельзя.
      parameters:
      - description: lat
        in: query
        name: lat
        required: true
        type: number
      - description: long
        in: query
        name: long
        required: true
        type: number
      - description: Rent id
        in: path
        name: rentId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/entities.Rent'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httpUtil.ResponseError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/httpUtil.ResponseError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/httpUtil.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Завершение аренды
      tags:
      - AdminRentController
  /api/Admin/Transport:
    get:
      description: Получение count транспортных средств с id >= start и с типом транспорта
        transportType
      parameters:
      - description: start
        in: query
        name: start
        required: true
        type: integer
      - description: count
        in: query
        name: count
        required: true
        type: integer
      - description: transportType
        enum:
        - Car
        - Bike
        - Scooter
        in: query
        name: transportType
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entities.Transport'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httpUtil.ResponseError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/httpUtil.ResponseError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/httpUtil.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Информация о транспортных средствах
      tags:
      - AdminTransportController
    post:
      consumes:
      - application/json
      description: Создание транспортного средства. При создании указывается id владельца
        транспортного средства - ownerId
      parameters:
      - description: Transport data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/transportHandler.AdminCreateTransport.transportData'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/entities.Transport'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httpUtil.ResponseError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/httpUtil.ResponseError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/httpUtil.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Создание транспортного средства
      tags:
      - AdminTransportController
  /api/Admin/Transport/{id}:
    delete:
      description: Удаление информации о транспортном средстве с id = {id}
      parameters:
      - description: Transport id
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httpUtil.ResponseError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/httpUtil.ResponseError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/httpUtil.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Удаление транспортного средства
      tags:
      - AdminTransportController
    get:
      description: Получение информации о транспортном средстве с id = {id}
      parameters:
      - description: Transport id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entities.Transport'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httpUtil.ResponseError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/httpUtil.ResponseError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/httpUtil.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Информация о транспортном средстве
      tags:
      - AdminTransportController
    put:
      consumes:
      - application/json
      description: Обновление информации о транспортном средстве с id = {id}
      parameters:
      - description: Transport id
        in: path
        name: id
        required: true
        type: integer
      - description: Transport data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/transportHandler.AdminUpdateTransport.transportData'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entities.Transport'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httpUtil.ResponseError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/httpUtil.ResponseError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/httpUtil.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Обновление транспортного средства
      tags:
      - AdminTransportController
  /api/Admin/TransportHistory/{transportId}:
    get:
      description: Получение информации обо всех арендах транспорта с id = {transportId}
      parameters:
      - description: Transport id
        in: path
        name: transportId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entities.Rent'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httpUtil.ResponseError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/httpUtil.ResponseError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/httpUtil.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: История аренды транспорта
      tags:
      - AdminRentController
  /api/Admin/UserHistory/{userId}:
    get:
      description: Получение информации обо всех арендах пользователем с id = {userId}
      parameters:
      - description: User id
        in: path
        name: userId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entities.Rent'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httpUtil.ResponseError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/httpUtil.ResponseError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/httpUtil.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: История аренды пользователя
      tags:
      - AdminRentController
  /api/Payment/Hesoyam/{id}:
    post:
      description: |-
        Пополняет баланс пользователся с id = {id} на 250 000.
        Администраторы могут пополнять баланс любому пользователю, обычные пользователи только себе.
      parameters:
      - description: Account id
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httpUtil.ResponseError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/httpUtil.ResponseError'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/httpUtil.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Пополнение баланса
      tags:
      - PaymentController
  /api/Rent/{rentid}:
    get:
      description: Получение данных аренды с id = {rentid}. Данные могут получить
        только арендатор и арендодатель.
      parameters:
      - description: Rent id
        in: path
        name: rentid
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entities.Rent'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httpUtil.ResponseError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/httpUtil.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Получение аренды пользователя
      tags:
      - RentController
  /api/Rent/End/{rentId}:
    post:
      description: |-
        Окончание аренды транспорта с id = {transportid}.
        Происходит рассчет итоговой суммы аренды и если она оказывается больше, чем сумма на счете пользователя, то в завершить аренду нельзя.
      parameters:
      - description: Transport id
        in: path
        name: rentId
        required: true
        type: integer
      - description: lat
        in: query
        name: lat
        required: true
        type: number
      - description: long
        in: query
        name: long
        required: true
        type: number
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/entities.Rent'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httpUtil.ResponseError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/httpUtil.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Окончание аренды
      tags:
      - RentController
  /api/Rent/MyHistory:
    get:
      description: Получение данных всех аренд текущего авторизованного пользователя
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entities.Rent'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httpUtil.ResponseError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/httpUtil.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Истории аренды пользователя
      tags:
      - RentController
  /api/Rent/New/{transportId}:
    post:
      description: |-
        Создание новой аредны транспорта с id = {transportid}.
        В параметра rentType указывается тип аренды: [Minutes, Days].
      parameters:
      - description: Transport id
        in: path
        name: transportId
        required: true
        type: integer
      - description: 'Rent type: [Minutes, Days]'
        enum:
        - Minutes
        - Days
        in: query
        name: rentType
        required: true
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/entities.Rent'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httpUtil.ResponseError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/httpUtil.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Создание новой аренды транспорта
      tags:
      - RentController
  /api/Rent/Transport:
    get:
      description: Получение информации о транспорте, доступного для аренды по месту
        его расположения и типу.
      parameters:
      - description: географическая широта
        in: query
        name: lat
        required: true
        type: number
      - description: радиус поиска
        in: query
        name: radius
        required: true
        type: number
      - description: географическая долгота
        in: query
        name: long
        required: true
        type: number
      - description: transportType
        enum:
        - All
        - Car
        - Bike
        - Scooter
        in: query
        name: transportType
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entities.Transport'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httpUtil.ResponseError'
      summary: Доступный транспорт для аренды
      tags:
      - RentController
  /api/Rent/TransportHistory/{transportId}:
    get:
      description: |-
        Получение данных обо всех арендах транспорта с id = {transportId}.
        Данные может получить только владелец транспорта.
      parameters:
      - description: Transport id
        in: path
        name: transportId
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entities.Rent'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httpUtil.ResponseError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/httpUtil.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Истории аренды транспорта
      tags:
      - RentController
  /api/Transport:
    post:
      consumes:
      - application/json
      description: Создание транспорта у текущего авторизованного пользователя
      parameters:
      - description: Transport data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/transportHandler.UserCreateTransport.transportData'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/transportHandler.UserCreateTransport.responseData'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httpUtil.ResponseError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/httpUtil.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Создаение транспорта
      tags:
      - TransportController
  /api/Transport/{id}:
    delete:
      description: Удаление транспорта с id = {id}. Удалить данные о транспорте может
        только владелец транспорта.
      parameters:
      - description: Transport id
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httpUtil.ResponseError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/httpUtil.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Удаление транспорта
      tags:
      - TransportController
    get:
      description: Просмотр информации о транспорте с id = {id}
      parameters:
      - description: Transport id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/transportHandler.UserGetTransport.transportData'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httpUtil.ResponseError'
      summary: Получение информации о транспотре
      tags:
      - TransportController
    put:
      consumes:
      - application/json
      description: Обновление информации о транспорте с id = {id}
      parameters:
      - description: Transport id
        in: path
        name: id
        required: true
        type: integer
      - description: Transport data
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/transportHandler.UserUpdateTransport.transportData'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/transportHandler.UserUpdateTransport.responseData'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/httpUtil.ResponseError'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/httpUtil.ResponseError'
      security:
      - ApiKeyAuth: []
      summary: Обновление информации о транспотре
      tags:
      - TransportController
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
